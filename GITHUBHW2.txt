# CS1210 HW2
#
# I certify that this file contains only my own work. I also certify
# that I have not shared the contents of this file with anyone in 
# any form.

######################################################################
# Specification 1: opens file and reads the text, returning the entire
# text as a string.
##This function should open the ﬁle named file,and return the contents
##of the ﬁle formatted as a single string. During processing, you should:
##(i)remove any blank lines,
##(ii)remove any lines consisting entirely of CAPITALIZED WORDS,and
##(iii)replace any explicit ’\n’ (newline) characters with spaces unless
##directly preceeded by a ’-’ (hyphen), in which case you should simply
##remove both the hyphen and the newline, restoring the original word.
## getText("test.txt")
## getText("cat.txt")

def getText(file):
    '''getText() opens the file you put in as an argument, and returns it
    as a string after removing blank and title lines, and restoring words
    that were split across 2 lines and separated with a hyphen.'''

    #opens the file and makes it into a string so I can process it.
    t = open(file).read()
    
    #replaces the hyphens that split words into 2 lines, doesn't touch
    #hyphens between 2 different words.
    t = t.replace("-\n", "")
    #print(t)#

    #splits the text into a list of lines, separated by newlines.
    L = t.split("\n")
    #return(L)#

    #joins the lines together, but excludes entirely CAPITAL lines,
    #as well as entirely blank ones.
    L = ' '.join([i for i in L if (i != i.upper()) and (len(i) != 0)])

    #returns the newly edited text (so, just the body of the file).
    return(L)

######################################################################
# Specification 2: takes a string, text, and removes possessives ('s)
# and most punctuation ('(),:\'"-—_').
##This function should take as input a string such as what might be
##returned by getText() and return a new string with the following
##modiﬁcations to the input:
##(i)Remove possessives, i.e.,"’s" at the end of a word;
##(ii)Remove ) ( , : - _ " ’
##(iii)Replace ! ? ; with .
##A condition of this function is that it should be easy to change or
##extend the substitutions made. In other words, a function that steps
##through each of these substitutions in an open-coded fashion will not
##get full credit; write your function so that the substitutions can be
##modiﬁed or extended without having to signiﬁcantly alter the code. Here’s
##a hint: if your code for this function is more than a few lines long,
##you’re probably not doing it right.
## flushMarks("test.txt")
## flushMarks("cat.txt")

def flushMarks(text):
    '''flushMarks() takes a string, removes possessive "'s"s and the
    following punctuation: '(),:\'"-—_'. It also replaces !, ?, and ;
    with periods. Then, it returns this as a new string.'''

    #takes out any possessive "'s"s appearing in the text.
    while "'s" in text:
        text = text[:text.index("'s")] + text[text.index("'s")+2:]
            #print(text)

    #replaces !, ?, and ; with periods.
    for punc in ['!', '?', ';']:
        if punc in text:
            text = text.replace(punc, '.')

    #takes out additional punctuation.
    for punc in ")(,:_\"\’": # \ to escape " and '
        if punc in text:
            text = text.replace(punc, '')

    #takes out hypens between words like "beautifully-crafted" in test.txt.
    for punc in "-":
            text = text.replace("-", " ")

    #gets rid of extra spaces.
    for spaces in "  ":
        text = text.replace("  ", " ")
    
    return(text)

    
##flushedText.replace('!' , '.') ##the long way... for !, ?, ; each
##return(text)
##return(flushedText)
######################################################################
# Specification 3: returns a list of k words starting at word i of the
# text. 
##This function should take as input a string such as might be returned
##by flushMarks() and return an ordered list of words extracted from the
##input string. The words returned should all be lowercase, and should
##contain only characters, no punctuation.
##You can think of the i and k arguments having similar — but not
##identical — function as the arguments to range(). If left unspeciﬁed,
##the default behavior is to return all the words in the input text.
##Otherwise, return a list of words starting with the ith word through,
##but not including, the (i + k)th word of the input (if k is None, the
##default, then return all of the words in the input starting with the
##ith word through the end).
##  extractWords("test.txt")
##  extractWords("test.txt", 1, 4)
##  extractWords("test.txt", 2)

def extractWords(text, i=0, k=None):
    '''extractWords() takes a string, an index for which word to
    start at, and the integer for the number of words you want past
    that and retuns a list.'''

    text = text.replace(".", "")
    #print(text)#
    
    #splits the text into a list of lowercase words.
    L = text.lower().split()
    #print(L)#

    #figures out whether k is meant to be used or not, and returns
    #the specified list.
    if k != None:
        return(L[i:i+k])
    else:
        return(L[i:])

######################################################################
# Specification 4: returns a list of sentences starting at word i
# of the text.
##This function returns a list of sentences, where each sentence is
##deﬁned as a string terminated by a ’.’ although the deﬁning ’.’
##itself is removed in the course of processing. The signiﬁcance of
##i and k are the same as for extractWords(), that is, they restrict
##the text to a passage between the ith up to but not including the
##(i + k)th words. Note that, depending on i and k,the ﬁrst and/or
##last sentences returned may actually be sentence fragments.
#word[:-1]="." ish?
# leading frag is auto-handled, can't tell it apart.
# lagging frag is treated as a sentence
def extractSentences(text, i=0, k=None):
    '''extractSentences() takes a string, the ith word to start on,
    and the kth number of words to go to, and returns a list of sentences
    (separated by periods by definition).'''
    # take out the subsection, THEN split it and make it into the list

    L = text.split()
    #print(L)#

    #takes out the specified subsection of the text (if there is one).
    if k == None:
        T = L[i:]
    else:
        T = L[i:i+k]
    #print(T)#

    #joins the words all together again, then splits them back into sentences.        
    T = " ".join(T).split(". ")

    return(T)

######################################################################
# Specification 5: returns an integer denoting the number of syllables
# in the specified word.
#
# Syllables are defined according to a few simple rules:
#   1. flush trailing -s and -e
#   2. each syllable starts with a vowel
#   3. y is a vowel when it follows a consonant
#   4. every word has at least one syllable
#
def countSyllables(word):
    '''Returns an integer count of the number of syllables in word.'''
    # Figure effective length of the word.
    length = len(word)
    # Flush trailing -s and -e
    if word[-1]=='s' or word[-1]=='e':
        length = length-1
    # Consume any leading consonants.
    i = 0
    while i < length and word[i].lower() not in 'aeiouy':
        i = i+1
    # Start counting syllables, starting with the first vowel (or y,
    # which is a vowel when it follows a consonant).
    s = 0
    while i < length:
        # New syllable.
        s = s+1
        # Consume a leading y, if present.
        if word[i].lower() == 'y':
            i = i+1
        # Consume characters while there are more vowels; here, a y is
        # a consonant.
        while i < length and word[i].lower() in 'aeiou':
            i = i+1
        # Consume cluster of consonants if there is any word left,
        # stopping at first vowel or y. Must consume at least one
        # consonant to consider y a vowel again.
        if i < length:
            i = i+1   # A non-y consonant.
        while i < length and word[i].lower() not in 'aeiouy':
            i = i+1
    # Every word has at least one syllable.
    return(max(s,1))

######################################################################
# Lasbarhets index Swedish Readability Formula
#   http://www.readabilityformulas.com/the-LIX-readability-formula.php
# wrd is the number of words
# lng is the number of long words (> 6 characters)
# snt is the number of sentences
# LIX = wrd/snt + (lng*100)/wrd
#
# Returns a floating point value.
## if use i and k: any sentence frags should be counted as 1 additional sentence
## at beginning OR end of text.
def lix(text, i=0, k=None):
    '''Given a string, a word to start on, and a number of words to go past
    that, returns the Lasbarhetsindex Swedish Readability score for that
    set of words.'''
    
    wrd = len(extractWords(text, i, k)) 

    snt = len(extractSentences(text, i, k))

    #iterates through the words in the text, counting the "long" ones.
    lng = 0
    for word in extractWords(text, i, k):
        if len(word) > 6:
            lng += 1
    
    return((wrd/snt) + ((lng*100)/wrd))

#supposed to be 33.93244 for test.txt
######################################################################
# Gunning's Fog Index:
#   http://www.readabilityformulas.com/gunning-fog-readability-formula.php
# asl is the average sentence length (total # words / total # sentences)?
# phw is the percent of "hard" words, where "hard" means 3 or more syllables
# FOG = 0.4(asl + phw)
# Returns a floating point value.
#
def fog(text, i=0, k=None, csyl = countSyllables):
    '''Given a string, word to start on, and number of words to go past that,
    returns the Gunning's Fog Index score for that string/fragment.'''

    asl = len(extractWords(text, i, k)) / len(extractSentences(text, i, k))
    #print(asl)#

    #iterates through the words in the text, counting the "hard" ones.
    bigWords = 0
    for word in extractWords(text, i, k):
        if csyl(word) >= 3:
            bigWords += 1
    #print(bigWords)#

    #calculates % of hard words: hard words/all words.
    phw = (bigWords/len(extractWords(text, i, k)))*100
    #print(phw)#
    
    return(.4*(asl+(phw)))

#supposed to be 12.33266888 for test.txt
######################################################################
# Smog Readability Score
#   http://www.readabilityformulas.com/mcglaughlin-smog-readability-formula.php
# hard is the number of "hard" words, where "hard" means 3 or more syllables
# sent is the number of sentences (careful of sentence fragments)
# SRS = 1.043*sqrt(30 * hard/sent) + 3.1291
#
# Returns a floating point value.
#
def srs(text, i=0, k=None, csyl = countSyllables):
    '''Given a string, word to start on, and number of words to go past that,
    returns the Smog Readability score for that string/fragment.'''

    hard = 0
    for word in extractWords(text, i, k):
        if csyl(word) >= 3:
            hard += 1

    sent =  len(extractSentences(text, i, k))

    return(1.043*sqrt(30 * hard/sent) + 3.1291)

######################################################################
# Reads in text from a file and evaluates its readability. Returns
# None. 
def evalText(file='cat.txt', i=0, k=None, csyl=countSyllables):
    '''Read in a text passage and report readability indexes.'''
    text = flushMarks(getText(file))
    print("Evaluating {}:".format(file.upper()))
    print("  {:5.2f} Lix Readability Formula".format(lix(text, i, k)))
    print("  {:5.2f} Gunning's Fog Index".format(fog(text, i, k, csyl)))
    print("  {:5.2f} Smog Readability Score".format(srs(text, i, k, csyl)))
